{"version":3,"sources":["scripts/main.js"],"names":["newGameField","button","document","querySelector","messageStart","messageWin","messageLose","gameScore","fieldRows","querySelectorAll","size","score","isWin","gameField","move","e","key","leftArrow","left","rightArrow","right","diwnArrow","down","upArrow","up","row","col","addNumber","render","classList","remove","isPosibleToMove","removeEventListener","reset","contains","add","findEmptyCell","randomY","randomX","Math","random","emptyCells","forEach","rowIndex","cell","columnIndex","push","floor","length","colIndex","elem","children","textContent","className","checkRows","map","newRow","filter","index","splice","concat","Array","fill","reverseRows","reverse","transposeGameField","_","checkColumns","hasDuplicates","some","addEventListener","replace","innerText"],"mappings":"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","file":"main.71476891.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\nconst fieldRows = document.querySelectorAll('.field-row');\n\nconst size = 4;\nlet score = 0;\nlet isWin = false;\nlet newGameField;\nlet gameField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nbutton.addEventListener('click', e => {\n  document.addEventListener('keydown', move);\n\n  if (button.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    isWin = false;\n    reset();\n  }\n\n  addNumber();\n  addNumber();\n  render();\n});\n\nfunction move(e) {\n  newGameField = [...gameField];\n\n  const leftArrow = 'ArrowLeft';\n  const rightArrow = 'ArrowRight';\n  const diwnArrow = 'ArrowDown';\n  const upArrow = 'ArrowUp';\n\n  switch (e.key) {\n    case leftArrow:\n      left(newGameField);\n      break;\n\n    case rightArrow:\n      right(newGameField);\n      break;\n\n    case diwnArrow:\n      down(newGameField);\n      break;\n\n    case upArrow:\n      up(newGameField);\n      break;\n\n    default:\n      return;\n  }\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      if (newGameField[row][col] !== gameField[row][col]) {\n        gameField = newGameField;\n        addNumber();\n        render();\n      }\n    }\n  }\n\n  if (isWin) {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (!isPosibleToMove()) {\n    messageLose.classList.remove('hidden');\n    document.removeEventListener('keydown', move);\n  }\n}\n\nfunction reset() {\n  score = 0;\n\n  gameField = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  if (!messageLose.classList.contains('hidden')) {\n    messageLose.classList.add('hidden');\n  }\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add('hidden');\n  }\n};\n\nfunction addNumber() {\n  const [randomY, randomX] = findEmptyCell();\n\n  gameField[randomY][randomX] = Math.random() < 0.9 ? 2 : 4;\n};\n\nfunction findEmptyCell() {\n  const emptyCells = [];\n\n  gameField.forEach((row, rowIndex) => {\n    row.forEach((cell, columnIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, columnIndex]);\n      }\n    });\n  });\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\n\nfunction render() {\n  gameField.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const elem = fieldRows[rowIndex].children[colIndex];\n\n      if (cell === 0) {\n        elem.textContent = '';\n        elem.className = 'field-cell';\n      } else {\n        elem.textContent = cell;\n        elem.className = `field-cell field-cell--${cell}`;\n      }\n    });\n  });\n\n  gameScore.textContent = score;\n};\n\nfunction left() {\n  if (!checkRows()) {\n    return;\n  }\n\n  newGameField = newGameField.map(row => {\n    const newRow = row.filter(cell => cell !== 0);\n\n    newRow.forEach((cell, index) => {\n      if (cell === newRow[index + 1]) {\n        newRow[index] *= 2;\n        newRow.splice(index + 1, 1);\n        score += newRow[index];\n\n        if (newRow[index] === 2048) {\n          isWin = true;\n        }\n      }\n    });\n\n    return newRow.concat(Array(size - newRow.length).fill(0));\n  });\n}\n\nfunction right() {\n  if (!checkRows()) {\n    return;\n  }\n\n  reverseRows();\n  left();\n  reverseRows();\n}\n\nfunction reverseRows() {\n  newGameField.forEach(row => row.reverse());\n}\n\nfunction down() {\n  transposeGameField();\n  right();\n  transposeGameField();\n}\n\nfunction up() {\n  transposeGameField();\n  left();\n  transposeGameField();\n}\n\nfunction transposeGameField() {\n  newGameField = newGameField[0]\n    .map((_, colIndex) => newGameField.map(row => row[colIndex]));\n}\n\nfunction isPosibleToMove() {\n  if (checkRows()) {\n    return true;\n  }\n\n  transposeGameField();\n\n  return checkColumns();\n}\n\nfunction checkRows() {\n  let hasDuplicates = false;\n\n  newGameField.forEach((row) => {\n    if (row.some((cell, index) => cell === 0 || cell === row[index + 1])) {\n      hasDuplicates = true;\n    }\n  });\n\n  return hasDuplicates;\n}\n\nfunction checkColumns() {\n  let hasDuplicates = false;\n\n  newGameField.forEach((row) => {\n    row.forEach((cell, index) => {\n      if (cell === row[index + 1]) {\n        hasDuplicates = true;\n      }\n    });\n  });\n\n  return hasDuplicates;\n}\n"]}